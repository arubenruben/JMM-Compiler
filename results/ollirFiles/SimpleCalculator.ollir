SimpleCalculator {
	.construct SimpleCalculator().V{
		invokespecial(this,"<init>").V;
	}
	.method public pow_int_int(base.i32, exp.i32).i32 {
		res.i32 :=.i32 1.i32;
		i.i32 :=.i32 0.i32;
		Loop:
			if(i.i32 <.i32 $2.exp.i32) goto Body;
		goto EndLoop;
		Body:
			res.i32 :=.i32 res.i32 *.i32 $1.base.i32;
			i.i32 :=.i32 i.i32 +.i32 1.i32;
			goto Loop;
		EndLoop:
		ret.i32 res.i32;
	}
	.method public cubeVolume_int(side.i32).i32 {
		res.i32 :=.i32 0.i32;
		if($1.side.i32 >=.i32 0.i32) goto else5;
			res.i32 :=.i32 0.i32;
			goto endif5;
		else5:
			t1.i32 :=.i32 invokevirtual(this, "pow_int_int", $1.side.i32, 3.i32).i32;
			res.i32 :=.i32 t1.i32;
		endif5:
		ret.i32 res.i32;
	}
	.method public sub_int_int(num1.i32, num2.i32).i32 {
		res.i32 :=.i32 $1.num1.i32 -.i32 $2.num2.i32;
		ret.i32 res.i32;
	}
	.method public div_int_int(num1.i32, num2.i32).i32 {
		res.i32 :=.i32 $1.num1.i32 /.i32 $2.num2.i32;
		ret.i32 res.i32;
	}
	.method public factorial_int(n.i32).i32 {
		res.i32 :=.i32 1.i32;
		i.i32 :=.i32 1.i32;
		if($1.n.i32 >=.i32 0.i32) goto else6;
			res.i32 :=.i32 1.i32;
			goto endif6;
		else6:
			Loop1:
				t1.i32 :=.i32 i.i32 -.i32 1.i32;
				if(t1.i32 <.i32 $1.n.i32) goto Body1;
			goto EndLoop1;
			Body1:
				res.i32 :=.i32 res.i32 *.i32 i.i32;
				i.i32 :=.i32 i.i32 +.i32 1.i32;
				goto Loop1;
			EndLoop1:
		endif6:
		ret.i32 res.i32;
	}
	.method public combinations_int_int(n.i32, k.i32).i32 {
		res.i32 :=.i32 0.i32;
		if($1.n.i32 >=.i32 1.i32) goto else7;
			res.i32 :=.i32 0.i32;
			goto endif7;
		else7:
			if($2.k.i32 >=.i32 1.i32) goto else8;
				res.i32 :=.i32 0.i32;
				goto endif8;
			else8:
				if($1.n.i32 >=.i32 $2.k.i32) goto else9;
					res.i32 :=.i32 0.i32;
					goto endif9;
				else9:
					t1.i32 :=.i32 invokevirtual(this, "factorial_int", $2.k.i32).i32;
					t2.i32 :=.i32 $1.n.i32 -.i32 $2.k.i32;
					t3.i32 :=.i32 invokevirtual(this, "factorial_int", t2.i32).i32;
					t4.i32 :=.i32 t1.i32 *.i32 t3.i32;
					t5.i32 :=.i32 invokevirtual(this, "factorial_int", $1.n.i32).i32;
					t6.i32 :=.i32 t5.i32 /.i32 t4.i32;
					res.i32 :=.i32 t6.i32;
				endif9:
			endif8:
		endif7:
		ret.i32 res.i32;
	}
	.method public sum_int_int(num1.i32, num2.i32).i32 {
		res.i32 :=.i32 $1.num1.i32 +.i32 $2.num2.i32;
		ret.i32 res.i32;
	}
	.method public mult_int_int(num1.i32, num2.i32).i32 {
		res.i32 :=.i32 $1.num1.i32 *.i32 $2.num2.i32;
		ret.i32 res.i32;
	}
	.method public permutations_int_int(n.i32, k.i32).i32 {
		res.i32 :=.i32 0.i32;
		if($1.n.i32 >=.i32 1.i32) goto else10;
			res.i32 :=.i32 0.i32;
			goto endif10;
		else10:
			if($2.k.i32 >=.i32 1.i32) goto else11;
				res.i32 :=.i32 0.i32;
				goto endif11;
			else11:
				if($1.n.i32 >=.i32 $2.k.i32) goto else12;
					res.i32 :=.i32 0.i32;
					goto endif12;
				else12:
					t1.i32 :=.i32 invokevirtual(this, "factorial_int", $1.n.i32).i32;
					t2.i32 :=.i32 $1.n.i32 -.i32 $2.k.i32;
					t3.i32 :=.i32 invokevirtual(this, "factorial_int", t2.i32).i32;
					t4.i32 :=.i32 t1.i32 /.i32 t3.i32;
					res.i32 :=.i32 t4.i32;
				endif12:
			endif11:
		endif10:
		ret.i32 res.i32;
	}
	.method public static main(args.array.String).V {
		t1.SimpleCalculator :=.SimpleCalculator new(SimpleCalculator).SimpleCalculator;
		invokespecial(t1.SimpleCalculator, "<init>").V;
		calc.SimpleCalculator :=.SimpleCalculator t1.SimpleCalculator;
		t2.i32 :=.i32 invokevirtual(calc.SimpleCalculator, "sum_int_int", 7.i32, 4.i32).i32;
		a.i32 :=.i32 t2.i32;
		invokestatic(io, "println", a.i32).V;
		t3.i32 :=.i32 invokevirtual(calc.SimpleCalculator, "sub_int_int", 15.i32, 9.i32).i32;
		a.i32 :=.i32 t3.i32;
		invokestatic(io, "println", a.i32).V;
		t4.i32 :=.i32 invokevirtual(calc.SimpleCalculator, "mult_int_int", 3.i32, 7.i32).i32;
		a.i32 :=.i32 t4.i32;
		invokestatic(io, "println", a.i32).V;
		t5.i32 :=.i32 invokevirtual(calc.SimpleCalculator, "div_int_int", 8.i32, 4.i32).i32;
		a.i32 :=.i32 t5.i32;
		invokestatic(io, "println", a.i32).V;
		t6.i32 :=.i32 invokevirtual(calc.SimpleCalculator, "pow_int_int", 2.i32, 3.i32).i32;
		a.i32 :=.i32 t6.i32;
		invokestatic(io, "println", a.i32).V;
		t7.i32 :=.i32 invokevirtual(calc.SimpleCalculator, "permutations_int_int", 6.i32, 3.i32).i32;
		a.i32 :=.i32 t7.i32;
		invokestatic(io, "println", a.i32).V;
		t8.i32 :=.i32 invokevirtual(calc.SimpleCalculator, "combinations_int_int", 6.i32, 4.i32).i32;
		a.i32 :=.i32 t8.i32;
		invokestatic(io, "println", a.i32).V;
		t9.i32 :=.i32 invokevirtual(calc.SimpleCalculator, "triangleArea_int_int", 4.i32, 9.i32).i32;
		a.i32 :=.i32 t9.i32;
		invokestatic(io, "println", a.i32).V;
		t10.i32 :=.i32 invokevirtual(calc.SimpleCalculator, "cubeVolume_int", 3.i32).i32;
		a.i32 :=.i32 t10.i32;
		invokestatic(io, "println", a.i32).V;
	}
	.method public triangleArea_int_int(base.i32, height.i32).i32 {
		res.i32 :=.i32 0.i32;
		if($1.base.i32 >=.i32 0.i32) goto else13;
			res.i32 :=.i32 0.i32;
			goto endif13;
		else13:
			if($2.height.i32 >=.i32 0.i32) goto else14;
				res.i32 :=.i32 0.i32;
				goto endif14;
			else14:
				t1.i32 :=.i32 $1.base.i32 *.i32 $2.height.i32;
				t2.i32 :=.i32 t1.i32 /.i32 2.i32;
				res.i32 :=.i32 t2.i32;
			endif14:
		endif13:
		ret.i32 res.i32;
	}
}