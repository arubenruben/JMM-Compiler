MonteCarloPi {
	.construct MonteCarloPi().V{
		invokespecial(this,"<init>").V;
	}
	.method public performSingleEstimate().bool {
		t1.i32 :=.i32 0.i32 -.i32 100.i32;
		t2.i32 :=.i32 invokestatic(MathUtils, "random", t1.i32, 100.i32).i32;
		rand1.i32 :=.i32 t2.i32;
		t3.i32 :=.i32 0.i32 -.i32 100.i32;
		t4.i32 :=.i32 invokestatic(MathUtils, "random", t3.i32, 100.i32).i32;
		rand2.i32 :=.i32 t4.i32;
		t5.i32 :=.i32 rand1.i32 *.i32 rand1.i32;
		t6.i32 :=.i32 rand2.i32 *.i32 rand2.i32;
		t7.i32 :=.i32 t5.i32 +.i32 t6.i32;
		t8.i32 :=.i32 t7.i32 /.i32 100.i32;
		squareDist.i32 :=.i32 t8.i32;
		if(squareDist.i32 >=.i32 100.i32) goto else21;
			in_circle.bool :=.bool 1.bool;
			goto endif21;
		else21:
			in_circle.bool :=.bool 0.bool;
		endif21:
		ret.bool in_circle.bool;
	}
	.method public static main(args.array.String).V {
		t1.i32 :=.i32 invokestatic(ioPlus, "requestNumber").i32;
		num_samples.i32 :=.i32 t1.i32;
		t2.MonteCarloPi :=.MonteCarloPi new(MonteCarloPi).MonteCarloPi;
		invokespecial(t2.MonteCarloPi, "<init>").V;
		montecarlo.MonteCarloPi :=.MonteCarloPi t2.MonteCarloPi;
		t3.i32 :=.i32 invokevirtual(montecarlo.MonteCarloPi, "estimatePi100_int", num_samples.i32).i32;
		pi_estimate_times_100.i32 :=.i32 t3.i32;
		invokestatic(ioPlus, "printResult", pi_estimate_times_100.i32).V;
	}
	.method public estimatePi100_int(n.i32).i32 {
		samples_so_far.i32 :=.i32 0.i32;
		samples_in_circle.i32 :=.i32 0.i32;
		Loop18:
			if(samples_so_far.i32 <.i32 $1.n.i32) goto Body18;
		goto EndLoop18;
		Body18:
				samples_in_circle.i32 :=.i32 samples_in_circle.i32 +.i32 1.i32;
				goto endif22;
			else22:
			endif22:
			samples_so_far.i32 :=.i32 samples_so_far.i32 +.i32 1.i32;
			goto Loop18;
		EndLoop18:
		t3.i32 :=.i32 400.i32 *.i32 samples_in_circle.i32;
		t4.i32 :=.i32 t3.i32 /.i32 $1.n.i32;
		pi_estimate.i32 :=.i32 t4.i32;
		ret.i32 pi_estimate.i32;
	}
}