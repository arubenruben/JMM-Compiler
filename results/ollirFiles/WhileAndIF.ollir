WhileAndIF {
	.construct WhileAndIF().V{
		invokespecial(this,"<init>").V;
	}
	.method public static main(args.array.String).V {
		a.i32 :=.i32 20.i32;
		b.i32 :=.i32 10.i32;
		t1.array.i32 :=.array.i32 new(array, 10.i32).array.i32;
		d.array.i32 :=.array.i32 t1.array.i32;
		if(a.i32 >=.i32 b.i32) goto else15;
			c.i32 :=.i32 a.i32 -.i32 1.i32;
			goto endif15;
		else15:
			c.i32 :=.i32 b.i32 -.i32 1.i32;
		endif15:
		Loop2:
			t4.i32 :=.i32 0.i32 -.i32 1.i32;
			if(t4.i32 <.i32 c.i32) goto Body2;
		goto EndLoop2;
		Body2:
			t5.i32 :=.i32 d[c.i32].i32;
			t6.i32 :=.i32 a.i32 -.i32 b.i32;
			d[c.i32].i32 :=.i32 t6.i32;
			c.i32 :=.i32 c.i32 -.i32 1.i32;
			a.i32 :=.i32 a.i32 -.i32 1.i32;
			b.i32 :=.i32 b.i32 -.i32 1.i32;
			goto Loop2;
		EndLoop2:
		c.i32 :=.i32 0.i32;
		Loop3:
			t10.i32 :=.i32 arraylength(d.array.i32).i32;
			if(c.i32 <.i32 t10.i32) goto Body3;
		goto EndLoop3;
		Body3:
			t11.i32 :=.i32 d[c.i32].i32;
			invokestatic(io, "println", t11.i32).V;
			c.i32 :=.i32 c.i32 +.i32 1.i32;
			goto Loop3;
		EndLoop3:
		c.i32 :=.i32 0.i32;
	}
}