options
{
    LOOKAHEAD = 1;
    MULTI = true;
}

PARSER_BEGIN(Parser)
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.io.FileReader;
import java.io.FileNotFoundException;
public class Parser
{
    private int numberOfSyntaxErrors = 0;
    public static int MAX_NUMBER_SYNTAX_ERRORS = 10;
    private List<String> fileLines = new ArrayList<String>();
    private String filename;

    //TODO constant to be put somewhere else
    public static final String ANSI_RESET = "\u001B[0m";
    public static final String ANSI_BLACK = "\u001B[30m";
    public static final String ANSI_RED = "\u001B[31m";
    public static final String ANSI_GREEN = "\u001B[32m";
    public static final String ANSI_YELLOW = "\u001B[33m";
    public static final String ANSI_BLUE = "\u001B[34m";
    public static final String ANSI_PURPLE = "\u001B[35m";
    public static final String ANSI_CYAN = "\u001B[36m";
    public static final String ANSI_WHITE = "\u001B[37m";

    private void reportSyntaxError(ParseException e){
        String errorType = "Syntax";
        System.out.println("------------------------------------------------");
        System.out.println(ANSI_RED + "Error NÂº" + numberOfSyntaxErrors + ANSI_RESET);
        System.out.println("Type of error: " + errorType + "" );

        String line = "";
        String indicator = "";

        if(!fileLines.isEmpty()){
            line = fileLines.get(e.currentToken.next.beginLine - 1);
            for(int i = 0; i < e.currentToken.next.beginColumn - 1; i++) {
                if (line.charAt(i) == '\t')
                    indicator += "\t";
                else
                    indicator += " ";
            }
            System.out.println("Error place: line " + e.currentToken.next.beginLine + " column " + indicator.length());
            System.out.println(line);
            indicator += ANSI_RED + "^" + ANSI_RESET;
            System.out.println(indicator);
        }

        System.out.println("Found: " + e.currentToken.next);
        System.out.print("Expected: ");
        for (int [] expectedTokenArray : e.expectedTokenSequences){
                for(int expectedToken : expectedTokenArray){
                    System.out.print(e.tokenImage[expectedToken] + ",");
                }
        }
        System.out.println();
        System.out.println("------------------------------------------------");
    }

    public void setFileLines(String code){
       Scanner s = new Scanner(code);
       while (s.hasNext()) {
           fileLines.add(s.nextLine());
       }
    }

    private void handleWhileSyntaxError(ParseException e) throws ParseException{

        reportSyntaxError(e);

        Token t;
        do {
            t = getToken(1);
            if (t.kind == EOF || t.kind == LCUR)
                break;
            t = getNextToken();
        } while (t.kind != RPAR);

        this.numberOfSyntaxErrors++;
        if (this.numberOfSyntaxErrors >= MAX_NUMBER_SYNTAX_ERRORS) {
          throw new ParseException("Parser caught the maximum amount of errors (" + MAX_NUMBER_SYNTAX_ERRORS + " errors).");
        }
    }
}


PARSER_END(Parser)

SKIP :
{
	" " | "\r" | "\t" | "\n"
	|< "//" (~["\r", "\n"])* >
	| "/*" : WithinComment
}

<WithinComment> SKIP :
{
  "*/" : DEFAULT
}

<WithinComment> MORE :
{
  <~[]>
}

TOKEN:
{
	< IMPORT: "import" >
	|   < DOT: "." >
	|   < SEMICOLON: ";" >
	|   < CLASS: "class" >
    |   < EXTENDS: "extends" >
    |   < LCUR: "{" >
    |   < RCUR: "}" >
    |   < PUBLIC: "public" >
    |   < LPAR: "(" >
    |   < RPAR: ")" >
    |   < COMMA: "," >
    |   < RETURN: "return" >
    |   < STATIC: "static" >
    |   < VOID: "void" >
    |   < MAIN: "main" >
    |   < STRING: "String" >
    |   < LREC: "[" >
    |   < RREC: "]" >
    |   < INT: "int" >
    |   < BOOLEAN: "boolean" >
    |   < IF: "if" >
    |   < ELSE: "else" >
    |   < WHILE: "while" >
    |   < EQUAL: "=" >
    |   < AND: "&&" >
    |   < LESS: "<" >
    |   < GREATER: ">" >
    |   < PLUS: "+" >
    |   < MINUS: "-" >
    |   < MULT : "*" >
    |   < DIV : "/">
    |   < LENGTH : "length">
    |   < TRUE : "true">
    |   < FALSE: "false">
    |   < THIS:"this">
    |   < NEW:"new">
    |   < NOT:"!">
    |   < IDENTIFIER: <LETTER> (<LETTER>|<INTEGERLITERAL> )*>
    |   < LETTER: ["a"-"z","A"-"Z","_"]>
    |   < INTEGERLITERAL: (["0"-"9"])+ >

}


SimpleNode Program(): {}
{
    { this.numberOfSyntaxErrors = 0; }
    ImportDeclaration() ClassDeclaration() <EOF> {return jjtThis;}
}
void ImportDeclaration() #void : {}
{
    (Import())*
}
void Import() #void:{}
{
    <IMPORT>ImportPath()<SEMICOLON>
}
void ImportPath()#void:{}
{
    <IDENTIFIER>
    (<DOT> <IDENTIFIER> )*
}
void ClassDeclaration() #Class :{Token t;}
{
    <CLASS> t=<IDENTIFIER>{jjtThis.value=t.image;}[<EXTENDS> t=<IDENTIFIER>{jjtThis.value=t.image;} #Extends]<LCUR>
        (VarDeclaration())*
        (MethodDeclaration())*
    <RCUR>
}
void Type() #Type:{Token t; Boolean array=false;}
{
    t=<BOOLEAN> {jjtThis.value=t.image;}
    |
    t=<IDENTIFIER>{jjtThis.value=t.image;}
    |
    t=<INT> [<LREC> <RREC>{array=true;}]
    {
        if (array)
            jjtThis.value="array("+t.image+")";
        else
            {jjtThis.value=t.image;}
    }


}
void VarDeclaration() #VarDeclaration: {Token t;}
{
    Type() t=<IDENTIFIER>{jjtThis.value=t.image;} <SEMICOLON>
}
void MethodDeclaration() #void : {}
{
    <PUBLIC>(ClassMethod() | StaticMethod() )

}
void ClassMethod()#ClassMethod:{Token t;}
{
    Type() t=<IDENTIFIER>{jjtThis.value=t.image;}<LPAR>ClassMethodParameters()<RPAR><LCUR>
         MethodBody()
        ReturnInstruction()
    <RCUR>

}
void ReturnInstruction()#void:{}
{
    <RETURN> Expression() <SEMICOLON> #Return(1)
}
void ClassMethodParameters() #void:{}
{
    [ClassMethodParameter() (<COMMA> ClassMethodParameter() )*]
}
void ClassMethodParameter() #ClassMethodParameter:{Token t;}
{
    Type() t=<IDENTIFIER>{jjtThis.value=t.image;}
}
void StaticMethod()#Main:{Token t;}
{
    <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LREC> <RREC> t=<IDENTIFIER>{jjtThis.value="["+t.image+"]";} <RPAR><LCUR>
        MethodBody()
    <RCUR>
}
void MethodBody()#void:{}
{
    (LOOKAHEAD(2)
    VarDeclaration())*
    (Statement())*
}
void Statement() #void: {}{
    BlockStatement()
    |
    IfStatement()
    |
    WhileStatement()
    |
    LOOKAHEAD(2)
    AssignmentStatement()
    |
    Expression() <SEMICOLON>

}
void BlockStatement() #void:{}
{
    <LCUR> (Statement())* <RCUR>
}
void IfStatement():{}
{
    <IF> <LPAR> Expression() <RPAR>
        Statement()
    <ELSE>
        Statement()
}
void AssignmentStatement()#AssignmentStatement:{Token t;Boolean array=false;}
{
    t=<IDENTIFIER> [<LREC> Expression()#Index <RREC>{array=true;}] <EQUAL> Expression() <SEMICOLON>
    {if (array){
        jjtThis.value="array("+t.image+")";
    }else{
        jjtThis.value=t.image;
    }
}
}

void WhileStatement()#While: {}
{
    <WHILE>
    try {
     <LPAR> Expression() <RPAR>
    }
    catch (ParseException e) {
        handleWhileSyntaxError(e);
    }
    Statement()
}
//According to https://introcs.cs.princeton.edu/java/11precedence/
void Expression() #void :{}
{
    ExpressionLevel9Priority() AndExpression()
}
void AndExpression()#void:{}
{
     [<AND>  ExpressionLevel9Priority() AndExpression() #And(2)]
}
void ExpressionLevel9Priority()#void:{}
{
     ExpressionLevel11Priority() LessExpression()
}
void LessExpression()#void:{}
{
    [<LESS>  ExpressionLevel11Priority() LessExpression()#Less(2)]
}
void ExpressionLevel11Priority()#void:{}
{
    ExpressionLevel12Priority() AddSubExpression()
}
void AddSubExpression()#void:{}
{
     [
     <PLUS>  ExpressionLevel12Priority() AddSubExpression() #Add(2)
     |
     <MINUS>  ExpressionLevel12Priority() AddSubExpression() #Sub(2)
     ]
}
void ExpressionLevel12Priority()#void:{}
{
    ExpressionLevel14Priority() MultDivExpression()
}

void MultDivExpression()#void:{}
{
     [
     <MULT>  ExpressionLevel14Priority() MultDivExpression() #Mult(2)
     |
     <DIV>  ExpressionLevel14Priority() MultDivExpression() #Div(2)
     ]
}
void ExpressionLevel14Priority()#void:{}
{
     ExpressionLevel15Priority() NotExpression()
}
void NotExpression()#void:{}
{
    [<NOT> ExpressionLevel15Priority() NotExpression()]
}
void ExpressionLevel15Priority()#void:{}
{
    ExpressionLevel16Priority() DotExpression()
}
void DotExpression()#void:{}
{
    [<DOT> Method() DotExpression()]
}
void Method() #Method:{Token t;}
{
    t=<LENGTH>{jjtThis.value=t.image;}
    |
    (t=<IDENTIFIER>{jjtThis.value=t.image;} <LPAR> MethodParameters() <RPAR>)
}
void MethodParameters()#void:{}
{
    [Expression() (MethodParameter()) *]
}
void MethodParameter():{}
{
    <COMMA> Expression()
}

void ExpressionLevel16Priority()#void:{}
{
    Terminal() | <LPAR>Expression()<RPAR> | <LREC>Expression()<RREC>
}

void Terminal()#void:{Token t;}
{
    t=<IDENTIFIER>{jjtThis.value=t.image;} #Identifier
    |
    TermianalNonIdentifier()
    |
    <NEW> ((<INT>{jjtThis.value="array(int)";}<LREC>Expression()<RREC>)|(t=<IDENTIFIER>{jjtThis.value=t.image;}<LPAR> <RPAR>))#New
}
void TermianalNonIdentifier() #void:{Token t;}
{
    t=<INTEGERLITERAL>{jjtThis.value=t.image;} #Integer
    |
    t=<TRUE>{jjtThis.value=t.image;}#Boolean
    |
    t=<FALSE>{jjtThis.value=t.image;}#Boolean
    |
    t=<THIS>{jjtThis.value=t.image;}#This
}
