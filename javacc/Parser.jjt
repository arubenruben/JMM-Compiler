options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Parser)
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.io.FileReader;
import java.io.FileNotFoundException;
public class Parser
{
    private int numberOfSyntaxErrors = 0;
    public static int MAX_NUMBER_SYNTAX_ERRORS = 10;
    private List<String> fileLines = new ArrayList<String>();
    private String filename;


    private void reportSyntaxError(ParseException e){
        String errorType = "Syntax";
        System.out.println("------------------------------------------------");
        System.out.println("Error NÂº" + numberOfSyntaxErrors + ":");
        System.out.println("Type of error: " + errorType);

        String line = "";
        String indicator = "";

        if(!fileLines.isEmpty()){
            line = fileLines.get(e.currentToken.next.beginLine - 1);
            for(int i = 0; i < e.currentToken.next.beginColumn - 1; i++) {
                if (line.charAt(i) == '\t')
                    indicator += "\t";
                else
                    indicator += " ";
            }
            System.out.println("Error place: line " + e.currentToken.next.beginLine + " column " + indicator.length());
            System.out.println(line);
            indicator += "^";
            System.out.println(indicator);
        }

        System.out.println("Found: " + e.currentToken.next);
        System.out.print("Expected: ");
        for (int [] expectedTokenArray : e.expectedTokenSequences){
                for(int expectedToken : expectedTokenArray){
                    System.out.print(e.tokenImage[expectedToken] + ",");
                }
        }
        System.out.println();
        System.out.println("------------------------------------------------");
    }

    public void setFileLines(String code){
       Scanner s = new Scanner(code);
       while (s.hasNext()) {
           fileLines.add(s.nextLine());
       }
    }

    private void handleWhileSyntaxError(ParseException e) throws ParseException{

        reportSyntaxError(e);

        Token t;
        do {
            t = getToken(1);
            if (t.kind == EOF || t.kind == LCUR || t.kind == IF || t.kind == WHILE)
                break;
            t = getNextToken();
        } while (t.kind != RPAR);

        this.numberOfSyntaxErrors++;
        if (this.numberOfSyntaxErrors >= MAX_NUMBER_SYNTAX_ERRORS) {
          throw new ParseException("Parser caught the maximum amount of errors (" + MAX_NUMBER_SYNTAX_ERRORS + " errors).");
        }
    }
}


PARSER_END(Parser)

SKIP :
{
	" " | "\r" | "\t" | "\n"
	|< "//" (~["\r", "\n"])* >
	| "/*" : WithinComment
}

<WithinComment> SKIP :
{
  "*/" : DEFAULT
}

<WithinComment> MORE :
{
  <~[]>
}

TOKEN:
{

	    < IMPORT: "import" >
	|   < DOT: "." >
	|   < SEMICOLON: ";" >
	|   < CLASS: "class" >
    |   < EXTENDS: "extends" >
    |   < LCUR: "{" >
    |   < RCUR: "}" >
    |   < PUBLIC: "public" >
    |   < LPAR: "(" >
    |   < RPAR: ")" >
    |   < COMMA: "," >
    |   < RETURN: "return" >
    |   < STATIC: "static" >
    |   < VOID: "void" >
    |   < MAIN: "main" >
    |   < STRING: "String" >
    |   < LREC: "[" >
    |   < RREC: "]" >
    |   < INT: "int" >
    |   < BOOLEAN: "boolean" >
    |   < IF: "if" >
    |   < ELSE: "else" >
    |   < WHILE: "while" >
    |   < EQUAL: "=" >
    |   < AND: "&&" >
    |   < LESS: "<" >
    |   < GREATER: ">" >
    |   < PLUS: "+" >
    |   < MINUS: "-" >
    |   < MULT : "*" >
    |   < DIV : "/">
    |   < LENGTH : "length">
    |   < TRUE : "true">
    |   < FALSE: "false">
    |   < THIS:"this">
    |   < NEW:"new">
    |   < NOT:"!">
    |   < IDENTIFIER: <LETTER> (<LETTER>|<INTEGERLITERAL> )*>
    |   < LETTER: ["a"-"z","A"-"Z","_"]>
    |   < INTEGERLITERAL: (["0"-"9"])+ >

}


SimpleNode Program(): {}
{
    {
        this.numberOfSyntaxErrors = 0;
    }
    ImportDeclaration() ClassDeclaration() <EOF> {return jjtThis;}
}
void Type():{}
{
    <INT> [<LREC> <RREC>] | <BOOLEAN>| <IDENTIFIER>
}
void ImportDeclaration() : {}
{
    (<IMPORT> <IDENTIFIER> (<DOT> <IDENTIFIER>)* <SEMICOLON>)*
}


void ClassDeclaration() : {}
{
    <CLASS> <IDENTIFIER> [<EXTENDS> <IDENTIFIER>]
    <LCUR>(VarDeclaration())* (MethodDeclaration())*<RCUR>
}

void VarDeclaration() : {}
{
    Type()<IDENTIFIER><SEMICOLON>
}

void MethodDeclaration() : {}
{
    <PUBLIC>(ClassMethod() | StaticFunction() )

}
void ClassMethod():{}
{
    Type() <IDENTIFIER> <LPAR> [Type() <IDENTIFIER> (<COMMA> Type() <IDENTIFIER>)*] <RPAR><LCUR>
         MethodBody()
        <RETURN> Expression() <SEMICOLON>
    <RCUR>

}
void StaticFunction():{}
{
    <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LREC> <RREC> <IDENTIFIER> <RPAR><LCUR>
        MethodBody()
        <RETURN> Expression() <SEMICOLON>
    <RCUR>
}
void MethodBody():{}
{
    (LOOKAHEAD(2)
    VarDeclaration())*
    (Statement())*
}

void Statement() : {}{
    <LCUR> (Statement())* <RCUR>
    |
    <IF> <LPAR> Expression() <RPAR>
        Statement()
    <ELSE>
        Statement()
    |
    WhileBlock()
    |
    LOOKAHEAD(2)
    <IDENTIFIER> ((<LREC> Expression() <RREC> <EQUAL> Expression())|(<EQUAL> Expression())) <SEMICOLON>
    |
    Expression() <SEMICOLON>

}

//According to https://introcs.cs.princeton.edu/java/11precedence/
void WhileBlock(): {}
{

    try {
    <WHILE>   <LPAR> Expression() <RPAR>
    }
    catch (ParseException e) {
        handleWhileSyntaxError(e);
    }

    Statement()
}

void Expression() : {}
{
    ExpressionLevel9Priority() LessExpression()
}
void ExpressionLevel9Priority():{}
{
    ExpressionLevel11Priority() AndExpression()
}
void LessExpression():{}
{
    [<LESS> ExpressionLevel9Priority() LessExpression() ]
}
void ExpressionLevel11Priority():{}
{
    ExpressionLevel12Priority() AddSubExpression()
}
void AndExpression():{}
{
    [<AND> ExpressionLevel11Priority() AndExpression() ]
}
void ExpressionLevel12Priority():{}
{
    ExpressionLevel14Priority() MultDivExpression()
}
void AddSubExpression():{}
{
    [(<PLUS>|<MINUS>)ExpressionLevel12Priority() AddSubExpression() ]
}
void ExpressionLevel14Priority():{}
{
    ExpressionLevel16_1Priority() NotExpression()
}
void MultDivExpression():{}
{
    [(<MULT>|<DIV>) ExpressionLevel14Priority() MultDivExpression()]
}
void NotExpression():{}
{
    [<NOT> ExpressionLevel16_1Priority() NotExpression() ]
}
void ExpressionLevel16Priority():{}
{
    Terminals() | (<LPAR>Expression()<RPAR>) | (<LREC>Expression() <RREC>)
}
void ExpressionLevel16_1Priority():{}
{
    ExpressionLevel16Priority() DotExpression()
}
void DotExpression():{}
{
    [<DOT>(<LENGTH>|(<IDENTIFIER><LPAR>[Expression() (<COMMA> Expression())* ] <RPAR> )) DotExpression() ]
}
void Terminals():{}
{
    <IDENTIFIER>|<INTEGERLITERAL>|<TRUE>|<FALSE>|<THIS>
    |
    ExpressionNew()
}
void ExpressionNew():{}
{
    <NEW>
    [(<INT> <LREC> Expression() <RREC>)
    |
    (<IDENTIFIER> <LPAR> <RPAR> )]
}