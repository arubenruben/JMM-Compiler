options
{
    LOOKAHEAD = 1;
    MULTI = true;
}

PARSER_BEGIN(Parser)
import java.lang.annotation.Repeatable;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.io.FileReader;
import java.io.FileNotFoundException;
import pt.up.fe.comp.jmm.report.Report;
import pt.up.fe.comp.jmm.report.ReportType;
import pt.up.fe.comp.jmm.report.Stage;

public class Parser
{
    private int numberOfSyntaxErrors = 0;
    private int numberOfSyntaxWarnings = 0;
    public static int MAX_NUMBER_SYNTAX_ERRORS = 10;
    private List<String> fileLines = new ArrayList<String>();
    private List<Report> reports = null;
    private String filename;
    private int numberOfPars = 0;

    public void setFileLines(List<String> fileLines){
        this.fileLines = fileLines;
    }

    public void setReports(List<Report> reports){
        this.reports = reports;
    }

    private void handleWhileSyntaxError(ParseException e) throws ParseException{

        this.numberOfSyntaxErrors++;

        if(reports != null)
             reports.add(new Report(ReportType.ERROR, Stage.SYNTATIC, e.currentToken.next.beginLine, e.currentToken.next.beginColumn, Utils.reportEntryError(e, numberOfSyntaxErrors, fileLines)));

        Token t;
        do {
            t = getToken(1);
            if (t.kind == EOF || t.kind == LCUR || this.numberOfPars == 0)
                break;
            t = getNextToken();
            if (t.kind == LPAR)
                this.numberOfPars++;
            else if (t.kind == RPAR)
                this.numberOfPars--;
        } while (true);


        if (this.numberOfSyntaxErrors >= MAX_NUMBER_SYNTAX_ERRORS) {
            numberOfSyntaxWarnings++;
            reports.add(new Report(ReportType.WARNING, Stage.SYNTATIC, 0, 0, Utils.reportEntryWarning("Parser caught the maximum amount of errors (" + MAX_NUMBER_SYNTAX_ERRORS + " errors).", numberOfSyntaxWarnings)));
            throw new RuntimeException("Parser caught the maximum amount of errors (" + MAX_NUMBER_SYNTAX_ERRORS + " errors).");
        }
    }

    private void addAtributes(SimpleNode simpleNode, Token token){
        simpleNode.put("value", token.image);
        simpleNode.put("line", Integer.toString(token.beginLine));
        simpleNode.put("column", Integer.toString(token.beginColumn));
    }
}



PARSER_END(Parser)

SKIP :
{
	" " | "\r" | "\t" | "\n"
	|< "//" (~["\r", "\n"])* >
	| "/*" : WithinComment
}

<WithinComment> SKIP :
{
  "*/" : DEFAULT
}

<WithinComment> MORE :
{
  <~[]>
}

TOKEN:
{
	< IMPORT: "import" >
	|   < DOT: "." >
	|   < SEMICOLON: ";" >
	|   < CLASS: "class" >
    |   < EXTENDS: "extends" >
    |   < LCUR: "{" >
    |   < RCUR: "}" >
    |   < PUBLIC: "public" >
    |   < LPAR: "(" >
    |   < RPAR: ")" >
    |   < COMMA: "," >
    |   < RETURN: "return" >
    |   < STATIC: "static" >
    |   < VOID: "void" >
    |   < MAIN: "main" >
    |   < STRING: "String" >
    |   < LREC: "[" >
    |   < RREC: "]" >
    |   < INT: "int" >
    |   < BOOLEAN: "boolean" >
    |   < IF: "if" >
    |   < ELSE: "else" >
    |   < WHILE: "while" >
    |   < EQUAL: "=" >
    |   < AND: "&&" >
    |   < LESS: "<" >
    |   < GREATER: ">" >
    |   < PLUS: "+" >
    |   < MINUS: "-" >
    |   < MULT : "*" >
    |   < DIV : "/">
    |   < LENGTH : "length">
    |   < TRUE : "true">
    |   < FALSE: "false">
    |   < THIS:"this">
    |   < NEW:"new">
    |   < NOT:"!">
    |   < IDENTIFIER: <LETTER> (<LETTER>|<INTEGERLITERAL> )*>
    |   < LETTER: ["a"-"z","A"-"Z","_", "$"]>
    |   < INTEGERLITERAL: (["0"-"9"])+ >
}


SimpleNode Program(): {}
{
    { this.numberOfSyntaxErrors = 0; }
    ImportDeclaration() ClassDeclaration() <EOF> {return jjtThis;}
}
void ImportDeclaration() #void : {}
{
    (Import())*
}
void Import() #void:{}
{
    <IMPORT>ImportPath()<SEMICOLON>
}
void ImportPath() :{Token t;}
{
    {List<String> stringList=new ArrayList<String>();}
    t = <IDENTIFIER> {stringList.add(t.image);}
    (<DOT> t = <IDENTIFIER> {stringList.add(t.image);})* {jjtThis.put("value",stringList.toString());}
}
void ClassDeclaration() #Class :{Token t;}
{
    <CLASS> t=<IDENTIFIER>{addAtributes(jjtThis, t);}[<EXTENDS> t=<IDENTIFIER>{addAtributes(jjtThis, t);} #Extends]<LCUR>
        (VarDeclaration())*
        (MethodDeclaration())*
    <RCUR>
}
void Type() #Type:{Token t; Boolean array=false;}
{
    (t=<BOOLEAN>
    |
    t=<IDENTIFIER>
    |
    t=<INT> [<LREC> <RREC>{array=true;}])
    {
        if (array)
        {
            jjtThis.put("isArray", "true");
        }
        else{
            jjtThis.put("isArray", "false");
        }
        {addAtributes(jjtThis, t);}
    }
}
void VarDeclaration() #VarDeclaration: {Token t;}
{
    Type() t=<IDENTIFIER>{addAtributes(jjtThis, t);} <SEMICOLON>
}
void MethodDeclaration() #void : {}
{
    <PUBLIC>(ClassMethod() | StaticMethod() )

}
void ClassMethod()#ClassMethod:{Token t;}
{
    Type() t=<IDENTIFIER>{addAtributes(jjtThis, t);}<LPAR>ClassMethodParameters()<RPAR><LCUR>
         MethodBody()
        ReturnInstruction()
    <RCUR>

}
void ReturnInstruction()#void:{}
{
    <RETURN> Expression() <SEMICOLON> #Return(1)
}
void ClassMethodParameters() #Parameters:{}
{
    [ClassMethodParameter() (<COMMA> ClassMethodParameter() )*]
}
void ClassMethodParameter() #void:{}
{
    Type() Identifier() #Parameter(2)
}
void StaticMethod()#Main:{Token t;}
{
    <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LREC> <RREC> t=<IDENTIFIER>{jjtThis.put("value",t.image);jjtThis.put("isArray","true");} <RPAR><LCUR>
        MethodBody()
    <RCUR>
}
void MethodBody() #Body:{}
{
    (LOOKAHEAD(2)
    VarDeclaration())*
    (Statement())*
}
void Statement() #void: {}{
    BlockStatement()
    |
    IfStatement()
    |
    WhileStatement()
    |
    LOOKAHEAD(2)
    AssignmentStatement()
    |
    Expression() <SEMICOLON>

}
void BlockStatement() #void:{}
{
    <LCUR> (Statement())* <RCUR>
}
void IfStatement() #If:{}
{
    <IF> Condition()
        Statement() #Then
    <ELSE>
        Statement() #Else
}

void Condition() :{}
{

   <LPAR> {this.numberOfPars++;} Expression() <RPAR> {this.numberOfPars--;}
}

void AssignmentStatement()#void : {}
{
    Identifier() (AssignmentArray() | AssignmentVar())
}

void AssignmentArray()#void : {}
{
    <LREC> Expression() #ArrayAccess(2) <RREC> <EQUAL> Expression() #AssignmentVarArray(2) <SEMICOLON>
}

void AssignmentVar()#void : {}
{
    <EQUAL> Expression() #AssignmentVar(2) <SEMICOLON>
}

void WhileStatement()#While: {}
{
    {this.numberOfPars = 0;}
    <WHILE>
    try {
        Condition()
    }
    catch (ParseException e) {
        handleWhileSyntaxError(e);
    }
    Statement()
}
//According to https://introcs.cs.princeton.import pt.up.fe.comp.jmm.report.Stage;edu/java/11precedence/
void Expression() #void :{}
{
    ExpressionLevel9Priority() AndExpression()
}
void AndExpression()#void:{}
{
     (<AND>  ExpressionLevel9Priority() #And(2))*
}
void ExpressionLevel9Priority()#void:{}
{
     ExpressionLevel11Priority() LessExpression()
}
void LessExpression()#void:{}
{
    (<LESS>  ExpressionLevel11Priority() #Less(2))*
}
void ExpressionLevel11Priority()#void:{}
{
    ExpressionLevel12Priority() AddSubExpression()
}
void AddSubExpression()#void:{}
{
  (<PLUS>  ExpressionLevel12Priority() #Add(2)
   |
  <MINUS>  ExpressionLevel12Priority() #Sub(2))*
}
void ExpressionLevel12Priority()#void:{}
{
    ExpressionLevel15Priority() MultDivExpression()
}

void MultDivExpression()#void:{}
{
     (<MULT>  ExpressionLevel15Priority() #Mult(2)
     |
     <DIV>  ExpressionLevel15Priority() #Div(2))*
}

void ExpressionLevel15Priority()#void:{}
{
    ExpressionLevel16Priority() DotExpression()
}
void DotExpression()#void:{}
{
    (<DOT> Method() #MethodCall(2))*
}
void Method() #Identifier:{Token t;}
{
    t=<LENGTH>{addAtributes(jjtThis, t);}
    |
    (t=<IDENTIFIER>{addAtributes(jjtThis, t);} <LPAR> [MethodParameters()] <RPAR>)
}
void MethodParameters()#Parameters:{}
{
    Expression() (MethodParameter()) *
}
void MethodParameter() #void:{}
{
    <COMMA> Expression()
}

void ExpressionLevel16Priority()#void:{}
{
    Terminal() [<LREC>Expression()<RREC>] | <LPAR> {this.numberOfPars++;} Expression()<RPAR> {this.numberOfPars--;} | <LREC>Expression()<RREC> | <NOT> ExpressionLevel16Priority() #Not
}

void Terminal()#void:{Token t;}
{
    t=<IDENTIFIER>{addAtributes(jjtThis, t);} #Identifier
    |
    TerminalNonIdentifier()
    |
    <NEW> ((<INT>{jjtThis.put("value","[int]");}<LREC>Expression()<RREC>)|(t=<IDENTIFIER>{addAtributes(jjtThis, t);}<LPAR> <RPAR>))#New
}
void TerminalNonIdentifier() #void:{Token t;}
{
    t=<INTEGERLITERAL>{addAtributes(jjtThis, t);} #Integer
    |
    t=<TRUE>{addAtributes(jjtThis, t);}#Boolean
    |
    t=<FALSE>{addAtributes(jjtThis, t);}#Boolean
    |
    t=<THIS>{addAtributes(jjtThis, t);}#This
}
void Identifier() :{Token t;}
{
    t=<IDENTIFIER>
    {
       jjtThis.put("value", t.image);
    }
}
