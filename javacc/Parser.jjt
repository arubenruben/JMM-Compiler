options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Parser)

public class Parser
{
}

PARSER_END(Parser)

SKIP :
{
	" " | "\r" | "\t" | "\n"
	|< "//" (~["\r", "\n"])* >
	| "/*" : WithinComment
}

<WithinComment> SKIP :
{
  "*/" : DEFAULT
}

<WithinComment> MORE :
{
  <~[]>
}

TOKEN:
{

	    < IMPORT: "import" >
	|   < DOT: "." >
	|   < SEMICOLON: ";" >
	|   < CLASS: "class" >
    |   < EXTENDS: "extends" >
    |   < LCUR: "{" >
    |   < RCUR: "}" >
    |   < PUBLIC: "public" >
    |   < LPAR: "(" >
    |   < RPAR: ")" >
    |   < COMMA: "," >
    |   < RETURN: "return" >
    |   < STATIC: "static" >
    |   < VOID: "void" >
    |   < MAIN: "main" >
    |   < STRING: "String" >
    |   < LREC: "[" >
    |   < RREC: "]" >
    |   < INT: "int" >
    |   < BOOLEAN: "boolean" >
    |   < IF: "if" >
    |   < ELSE: "else" >
    |   < WHILE: "while" >
    |   < EQUAL: "=" >
    |   < AND: "&&" >
    |   < LESS: "<" >
    |   < GREATER: ">" >
    |   < PLUS: "+" >
    |   < MINUS: "-" >
    |   < MULT : "*" >
    |   < DIV : "/">
    |   < LENGTH : "length">
    |   < TRUE : "true">
    |   < FALSE: "false">
    |   < THIS:"this">
    |   < NEW:"new">
    |   < NOT:"!">
    |   < IDENTIFIER: <LETTER> (<LETTER>|<INTEGERLITERAL> )*>
    |   < LETTER: ["a"-"z","A"-"Z","_"]>
    |   < INTEGERLITERAL: (["0"-"9"])+ >

}


SimpleNode Program(): {}
{
    ImportDeclaration() ClassDeclaration() <EOF> {return jjtThis;}
}
void Type():{}
{
    <INT> [<LREC> <RREC>] | <BOOLEAN>| <IDENTIFIER>
}
void ImportDeclaration() : {}
{
    (<IMPORT> <IDENTIFIER> (<DOT> <IDENTIFIER>)* <SEMICOLON>)*
}


void ClassDeclaration() : {}
{
    <CLASS> <IDENTIFIER> [<EXTENDS> <IDENTIFIER>]
    <LCUR>(VarDeclaration())* (MethodDeclaration())*<RCUR>
}

void VarDeclaration() : {}
{
    Type()<IDENTIFIER><SEMICOLON>
}

void MethodDeclaration() : {}
{
    <PUBLIC>(ClassMethod() | StaticFunction() )

}
void ClassMethod():{}
{
    Type() <IDENTIFIER> <LPAR> [Type() <IDENTIFIER> (<COMMA> Type() <IDENTIFIER>)*] <RPAR><LCUR>
        (LOOKAHEAD(2)VarDeclaration())*
        (Statement())*
        <RETURN> Expression() <SEMICOLON>
    <RCUR>

}
void StaticFunction():{}
{
    <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LREC> <RREC> <IDENTIFIER> <RPAR><LCUR>
        (LOOKAHEAD(2)VarDeclaration())*
        (Statement())*
        <RETURN> Expression() <SEMICOLON>
    <RCUR>
}
void Statement() : {}{
    <LCUR> (Statement())* <RCUR>
    |
    <IF> <LPAR> Expression() <RPAR>
        Statement()
    <ELSE>
        Statement()
    |
    <WHILE> <LPAR> Expression() <RPAR>
        Statement()
    |

    LOOKAHEAD(2)
    <IDENTIFIER> <LREC> Expression() <RREC> <EQUAL> Expression() <SEMICOLON>
    |
    LOOKAHEAD(2)
    <IDENTIFIER> <EQUAL> Expression() <SEMICOLON>
    |
    Expression() <SEMICOLON>



}

//According to https://introcs.cs.princeton.edu/java/11precedence/
void Expression() : {}
{
    ExpressionLevel9Priority() LessExpression()
}
void LessExpression():{}
{
    [<LESS> ExpressionLevel9Priority() LessExpression() ]
}
void ExpressionLevel9Priority():{}
{
    ExpressionLevel11Priority() AndExpression()
}
void AndExpression():{}
{
    [<AND> ExpressionLevel11Priority() AndExpression() ]
}
void ExpressionLevel11Priority():{}
{
    ExpressionLevel12Priority() AddSubExpression()
}
void AddSubExpression():{}
{
    [(<PLUS>|<MINUS>)ExpressionLevel12Priority() AddSubExpression() ]
}
void ExpressionLevel12Priority():{}
{
    ExpressionLevel13Priority() MultDivExpression()
}
void MultDivExpression():{}
{
    [(<MULT>|<DIV>) ExpressionLevel13Priority() MultDivExpression()]
}
void ExpressionLevel13Priority():{}
{
    ExpressionLevel16Priority() NewExpression()
}
//TODO:DOT AND NEW MIGHT NOT BE THAT WELL//TODO:DOT AND NEW MIGHT NOT BE THAT WELL
void NewExpression():{}
{
    [<NEW>ExpressionLevel14Priority() NewExpression() ]
}
void ExpressionLevel14Priority():{}
{
    ExpressionLevel16Priority() NotExpression()
}
void NotExpression():{}
{
    [<NOT> ExpressionLevel16Priority() NotExpression() ]
}
//TODO:DOT AND NEW MIGHT NOT BE THAT WELL
void ExpressionLevel16Priority():{}
{
    Terminals() | (<LPAR>Expression()<RPAR>)|(<LREC>Terminals() <RREC>)|(<DOT>Terminals() )
}
void Terminals():{}
{
    <IDENTIFIER>|<INTEGERLITERAL> |<TRUE>|<FALSE>|<THIS>
}

/*
void Expression(): {}
{
    //TODO Alter precendences

    Expression() <DOT> <LENGTH>
    |
    Expression() <DOT> Identifier() <LPAR> [Expression() (<COMMA> Expression())* ] <RPAR>
    |
    <NEW> <INT> <LREC> Expression() <RREC>
    |
    <NEW> Identifier() <LPAR> <RPAR>
}
 */